import {
  pgTable,
  text,
  timestamp,
  boolean,
  uuid,
  varchar,
  integer,
  jsonb,
  index,
  unique,
} from "drizzle-orm/pg-core";

// ============================================
// BETTER AUTH CORE TABLES
// Better Auth will create these tables automatically
// DO NOT MODIFY - These follow Better Auth's schema
// ============================================

export const user = pgTable("user", {
  id: text("id").primaryKey(),
  name: text("name"),
  email: text("email").notNull().unique(),
  emailVerified: boolean("email_verified").notNull().default(false),
  image: text("image"),
  createdAt: timestamp("created_at").notNull(),
  updatedAt: timestamp("updated_at").notNull(),

  // Better Auth Admin Plugin fields
  role: text("role").notNull().default("user"),
  banned: boolean("banned").default(false),
  banReason: text("ban_reason"),
  banExpires: timestamp("ban_expires"),
});

export const session = pgTable("session", {
  id: text("id").primaryKey(),
  expiresAt: timestamp("expires_at").notNull(),
  token: text("token").notNull().unique(),
  createdAt: timestamp("created_at").notNull(),
  updatedAt: timestamp("updated_at").notNull(),
  ipAddress: text("ip_address"),
  userAgent: text("user_agent"),
  userId: text("user_id")
    .notNull()
    .references(() => user.id, { onDelete: "cascade" }),

  // Better Auth Admin Plugin - Impersonation
  impersonatedBy: text("impersonated_by"),
});

export const account = pgTable("account", {
  id: text("id").primaryKey(),
  accountId: text("account_id").notNull(),
  providerId: text("provider_id").notNull(),
  userId: text("user_id")
    .notNull()
    .references(() => user.id, { onDelete: "cascade" }),
  accessToken: text("access_token"),
  refreshToken: text("refresh_token"),
  idToken: text("id_token"),
  accessTokenExpiresAt: timestamp("access_token_expires_at"),
  refreshTokenExpiresAt: timestamp("refresh_token_expires_at"),
  scope: text("scope"),
  password: text("password"),
  createdAt: timestamp("created_at").notNull(),
  updatedAt: timestamp("updated_at").notNull(),
});

export const verification = pgTable("verification", {
  id: text("id").primaryKey(),
  identifier: text("identifier").notNull(),
  value: text("value").notNull(),
  expiresAt: timestamp("expires_at").notNull(),
  createdAt: timestamp("created_at"),
  updatedAt: timestamp("updated_at"),
});

// ============================================
// BETTER AUTH API KEY PLUGIN
// This table is managed by Better Auth's API Key plugin
// ============================================

export const apiKey = pgTable("api_key", {
  // Core Identity Fields
  id: text("id").primaryKey(),
  name: text("name").notNull(),

  // Key Management
  start: text("start"), // First few chars for UI display (auto-generated by Better Auth)
  prefix: text("prefix"), // Custom prefix (e.g., 'sk_live_', 'pk_test_')
  key: text("key").notNull().unique(), // Hashed API key - Better Auth handles hashing

  // User Association
  userId: text("user_id")
    .notNull()
    .references(() => user.id, { onDelete: "cascade" }),

  // Rate Limiting (Built-in Better Auth feature)
  rateLimitEnabled: boolean("rate_limit_enabled").default(false),
  rateLimitTimeWindow: integer("rate_limit_time_window"), // Time window in ms
  rateLimitMax: integer("rate_limit_max"), // Max requests per window
  requestCount: integer("request_count").default(0), // Current request count

  // Usage Tracking & Refill System
  remaining: integer("remaining"), // Remaining requests (for quota system)
  refillAmount: integer("refill_amount"), // Amount to refill when refilling
  refillInterval: integer("refill_interval"), // Interval in ms to refill
  lastRefillAt: timestamp("last_refill_at"), // When was last refill
  lastRequest: timestamp("last_request"), // When was last API request

  // Status & Expiration
  enabled: boolean("enabled").default(true).notNull(), // Is key active/enabled
  expiresAt: timestamp("expires_at"), // Optional expiration date

  // Permissions System (Better Auth built-in)
  permissions: text("permissions"), // JSON string: '{"files":["read","write"],"users":["read"]}'

  // Custom Metadata (Your business logic)
  // Note: Better Auth expects this to be text, not jsonb
  // Better Auth handles JSON serialization/deserialization internally
  metadata: text("metadata").$type<{
    // Key type
    type?: "personal" | "organization" | "public";
    // Custom scopes (application-specific)
    scopes?: string[]; // ['read:abis', 'write:abis', 'delete:abis']

    // Security restrictions
    ipWhitelist?: string[]; // ['192.168.1.1', '10.0.0.0/8']
    allowedOrigins?: string[]; // ['https://example.com']

    notes?: string; // Internal notes about this key

    // Optional: Track additional custom stats
    customStats?: {
      totalAbisCreated?: number;
      totalAbisQueried?: number;
      totalContractsVerified?: number;
      lastResourceAccess?: {
        abis?: string;
        contracts?: string;
        networks?: string;
      };
    };
  }>(),

  // Timestamps
  createdAt: timestamp("created_at").notNull(),
  updatedAt: timestamp("updated_at").notNull(),
});

// Export relation types for use in queries
export type User = typeof user.$inferSelect;
export type NewUser = typeof user.$inferInsert;
export type Session = typeof session.$inferSelect;
export type NewSession = typeof session.$inferInsert;
export type ApiKey = typeof apiKey.$inferSelect;
export type NewApiKey = typeof apiKey.$inferInsert;
